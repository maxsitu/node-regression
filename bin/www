#!/usr/bin/env node
/**
 * Command line Options
 *
 */
var config = require('../config');
var program = require('commander');
var path = require('path');
program.version(config.version)
    .option('-r, --root <r>', 'Root path the test suite start from')
    .option('-o, --output <output_dir>', 'Ouput directory the log/err log files gonna be stored to.')
    .option('-l, --label <n>', 'Name you want to show for the root folder')
    .parse(process.argv);

if (!program.root) {
    program.outputHelp();
    process.exit();
}

if (!program.label) {
    program.label = path.basename(path.dirname(program.root));
}

if (!program.output) {
    program.output = path.join(path.dirname(program.root), 'out');
}


config.root = program.root;
config.label = program.label;
config.output = program.output;

console.log("root: ", config.root);
console.log("label: ", config.label);


/**
 * Module dependencies.
 */

var app = require('../app-http');
var debug = require('debug')('myapp2:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create http server
 */

var server = http.createServer(app);

/**
 * Create WSS server
 */
WebSocketServer = require('ws').Server;
wss = new WebSocketServer({ server: server });
wss.on('connection', function connection(ws) {
    ws.on('open', function open() {
        console.log('ws open');
    });
    ws.on('message', function incoming(msg) {
        console.log('received: %s', msg);
    });

    ws.send(JSON.stringify({label: config.label, root: config.root, output: config.output}));
});

wss.broadcast = function broadcast(data) {
    wss.clients.forEach(function each(client) {
        client.send(data);
    });
};

config.wss = wss;

/**
 * Listen on provided port, on all network interfaces.
 */

server.on('error', onError);
server.on('listening', onListening);

server.listen(port);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
